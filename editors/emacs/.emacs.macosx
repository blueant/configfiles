;; Emacs Load Path
(progn (cd "~/.emacs.d/plugins") (normal-top-level-add-subdirs-to-load-path))

;; NXHTML
(load-file "~/.emacs.d/plugins/nxhtml/autostart.el")
(load-file "~/.emacs.d/plugins/yaml-mode/yaml-mode.elc")

;; General Settings
(global-font-lock-mode t)
(windmove-default-keybindings)
(setq use-file-dialog nil)
(defalias 'yes-or-no-p 'y-or-n-p)
(setq transient-mark-mode t)
(setq line-number-mode t)
(setq column-number-mode t)
;; Visible Bell
(setq visible-bell 1)
;; Parenthesis Matching
(show-paren-mode 1)
;; ISwitch buffer
(iswitchb-mode 1)

;; This option is for macs to have the meta key from command
(setq mac-option-modifier 'meta)
(setq mac-command-notifier 'hyper)

;; MAC FONTS
(setq mac-allow-anti-aliasing nil)
(set-default-font "-*-Anonymous Pro-*-r-normal-*-10-*-*-*-*-*-*-*")

;; mac terminal mouse stuff
(unless window-system
  (xterm-mouse-mode 1)
  (global-set-key [mouse-4] '(lambda ()
                               (interactive)
                               (scroll-down 1)))
  (global-set-key [mouse-5] '(lambda ()
                               (interactive)
                               (scroll-up 1))))

;; Emacs Path
(setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
(setq exec-path (append exec-path '("/usr/local/bin")))

;; Remove GUI stuff
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'menu-bar-mode) (menu-bar-mode 1))

;; Programming in C
(setq c-set-style 'bsd)
(setq c-basic-offset 2)

;;
;; Key bindings
;;
(global-set-key (kbd "C-c c") 'comment-region)
(global-set-key (kbd "C-c u") 'uncomment-region)

;;
;; Fit Frames
;;
(require 'fit-frame)
(global-set-key (kbd "C-_") 'fit-frame)

;;
;; Ido
;;
(require 'ido)
(ido-mode 1) ;; enable ido-mode
(setq ido-enable-flex-matching t) ;; enable fuzzy matching

;; GoLang
(require 'go-mode)

;; JSON
(require 'json)

;; GIT
(require 'git)

;;
;; YASNIPPET
;;
(require 'yasnippet) ;; not yasnippet-bundle
(yas/initialize)
(setq yas/snippet-dirs "~/.emacs.d/plugins/yasnippet/snippets")
(yas/load-directory yas/snippet-dirs)

;;
;; Color Theme plugin
;;
(require 'color-theme)
(color-theme-initialize)
(color-theme-taylor)
;(color-theme-ld-dark)
;(color-theme-taming-mr-arneson)
;(color-theme-taming-hober)

;;
;; Scala
;;
(require 'scala-mode-auto)

; Scala Mode hooks
(defun me-turn-off-indent-tabs-mode ()
  (setq indent-tabs-mode nil))
(add-hook 'scala-mode-hook 'me-turn-off-indent-tabs-mode)

;;
;; Org-Mode
;;
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)

;;
;; TRAMP Plugin
;;
(require 'tramp)
(setq tramp-default-method "ssh")

;;
;; Ruby on Rails stuff
;; 

;; Rake files go to ruby-mode
(setq auto-mode-alist `(("\\.rake$" . ruby-mode) ,@auto-mode-alist))

;; nxml (HTML ERB template support)
(setq
 nxhtml-global-minor-mode t
 mumamo-chunk-coloring 'submode-colored
 nxhtml-skip-welcome t
 indent-region-mode t
 rng-nxml-auto-validate-flag nil
 nxml-degraded t)
(add-to-list 'auto-mode-alist '("\\.html\\.erb\\'" . eruby-nxhtml-mumamo))

;;
;; Backups
;;
; Force backups, added hook for before save
(setq version-control t ;; Use version numbers for backups
      kept-new-versions 16 ;; Number of newest versions to keep
      kept-old-versions 2 ;; Number of oldest versions to keep
      delete-old-versions t ;; Ask to delete excess backup versions?
      backup-directory-alist ;; don't leave emacs terds everywhere
      '(("." . "~/.emacs.d/saves")) ;; wipe butt in ~/.emacs.d/saves
      backup-by-copying-when-linked t) ;; Copy linked files, don't rename.
(defun force-backup-of-buffer ()
  (let ((buffer-backed-up nil))
    (backup-buffer)))
(add-hook 'before-save-hook  'force-backup-of-buffer)

; Autosave disabled
(setq auto-save-default nil)

;Tramp like backups left on remote server, no good, let's clean those up
(add-to-list 'backup-directory-alist
	     (cons "." "~/.emacs.d/saves/"))
(setq tramp-backup-directory-alist backup-directory-alist)

